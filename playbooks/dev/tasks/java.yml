- name: Include Java vars
  ansible.builtin.include_vars:
    file: java.yml

- name: Ensure Java environment directories are created
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop: "{{ java_directories }}"

- name: Install OpenJDKs on Debian-based system
  when: ansible_os_family == 'Debian'
  become: true
  ansible.builtin.apt:
    name:
      - "openjdk-{{ item }}-source"
      - "openjdk-{{ item }}-jdk"
      - "openjdk-{{ item }}-dbg"
      - "openjdk-{{ item }}-doc"
    state: present
  loop: "{{ jdks }}"

- name: Install OpenJDKs on RedHat-based system
  when: ansible_os_family == 'RedHat'
  become: true
  ansible.builtin.yum:
    name:
      - "java-{{ item }}-openjdk"
      - "java-{{ item }}-openjdk-devel"
      - "java-{{ item }}-openjdk-src"
      - "java-{{ item }}-openjdk-javadoc"
    state: present
  loop: "{{ jdks }}"

- name: Initialize JDK maps
  set_fact:
    jdk_map: {}

- name: Gather JDKs location on Debian-based systems
  when: ansible_os_family == 'Debian'
  ansible.builtin.shell: "update-alternatives --list java | grep {{ item }} | xargs dirname | xargs dirname"
  register: jdk_locations_Debian
  loop: "{{ jdks }}"

- name: Gather JDKs location on RedHat-based systems
  when: ansible_os_family == 'RedHat'
  ansible.builtin.shell: "update-alternatives --display java | grep -v -e '^ follower' -e 'Current' -e 'link' | grep {{ item }} | awk '{print $1}' | xargs dirname | xargs dirname"
  register: jdk_locations_RedHat
  loop: "{{ jdks }}"

- name: Flatten JDK locations
  ansible.builtin.set_fact:
    jdk_locations: "{{ item }}"
  loop:
    - "{{ jdk_locations_Debian }}"
    - "{{ jdk_locations_RedHat }}"
  when: not item.skipped

- name: Map a JDK version to its location
  set_fact:
    jdk_map: "{{ jdk_map | combine({ item: jdk_locations.results[idx].stdout }) }}"
  loop: "{{ jdks }}"
  loop_control:
    index_var: idx

- name: Set up JDK locations as environment variables
  ansible.builtin.lineinfile:
    path: "{{ profile_session_file }}"
    line: "export JDK{{ item.key }}_HOME={{ item.value }}"
    state: present
  loop: "{{ jdk_map | dict2items }}"

- name: Download JDT Language Server
  ansible.builtin.get_url:
    url: "https://www.eclipse.org/downloads/download.php?file=/jdtls/milestones/{{ jdtls.version }}/jdt-language-server-{{ jdtls.version }}-{{ jdtls.timestamp }}.tar.gz"
    dest: "/tmp/jdt-language-server-{{ jdtls.version }}-{{ jdtls.timestamp }}.tar.gz"

- name: Get JDT Language Server checksum
  register: jdtls_stat
  ansible.builtin.stat:
    path: "/tmp/jdt-language-server-{{ jdtls.version }}-{{ jdtls.timestamp }}.tar.gz"
    get_checksum: yes
    checksum_algorithm: sha256

- name: Download JDT Language Server expected SHA signature
  ansible.builtin.get_url:
    url: "https://www.eclipse.org/downloads/download.php?file=/jdtls/milestones/{{ jdtls.version }}/jdt-language-server-{{ jdtls.version }}-{{ jdtls.timestamp }}.tar.gz.sha256"
    dest: "/tmp/jdt-language-server-{{ jdtls.version }}-{{ jdtls.timestamp }}.tar.gz.sha256"

- name: Read JDT Language Server expected SHA signature
  register: jdtls_sha256
  ansible.builtin.shell: "cat /tmp/jdt-language-server-{{ jdtls.version }}-{{ jdtls.timestamp }}.tar.gz.sha256"

- name: Compare JDT Language server checksums
  fail:
    msg: "Checksum does not match"
  when: jdtls_sha256.stdout != jdtls_stat.stat.checksum

- name: Unpack JDT Language Server
  ansible.builtin.unarchive:
    src: "/tmp/jdt-language-server-{{ jdtls.version }}-{{ jdtls.timestamp }}.tar.gz"
    dest: "{{ jdtls_dir }}"
    remote_src: yes

- name: Get Equinox launcher location
  register: equinox_launcher
  ansible.builtin.shell: "ls {{ jdtls_dir }}/plugins/org.eclipse.equinox.launcher_*.jar"

- name: Set up JTD Language Server locations as environment variables
  ansible.builtin.lineinfile:
    path: "{{ profile_session_file }}"
    line: "export {{ item.name }}={{ item.value }}"
    state: present
  loop: "{{ jdtls_vars }}"
  vars:
    jdtls_vars:
      - name: JDTLS_HOME
        value: "{{ jdtls_dir }}"

      - name: JDTLS_LAUNCHER
        value: "{{ equinox_launcher.stdout }}"

- name: Clone Java Debug repo
  ansible.builtin.git:
    repo: https://github.com/microsoft/java-debug.git
    dest: "{{ lsps_dir }}/java-debug"
    clone: yes
    update: no

- name: Build Java Debug
  ansible.builtin.shell:
    chdir: "{{ lsps_dir }}/java-debug"
    cmd: ./mvnw clean install
  environment:
    JAVA_HOME: "{{ jdk_map[17] }}"

- name: Set up Java Debug locations as environment variables
  ansible.builtin.lineinfile:
    path: "{{ profile_session_file }}"
    line: "export JAVA_DEBUG_HOME={{ lsps_dir }}/java-debug"
    state: present

- name: Clone vscode-java-test
  ansible.builtin.git:
    repo: https://github.com/microsoft/vscode-java-test.git
    dest: "{{ lsps_dir }}/vscode-java-test"
    clone: yes
    update: yes

- name: Build vscode-java-test
  ansible.builtin.shell:
    chdir: "{{ lsps_dir }}/vscode-java-test"
    cmd: npm install && npm run build-plugin
  environment:
    JAVA_HOME: "{{ jdk_map[17] }}"

- name: Set up vscode-java-test locations as environment variables
  ansible.builtin.lineinfile:
    path: "{{ profile_session_file }}"
    line: "export VSCODE_JAVA_TEST_HOME={{ lsps_dir }}/vscode-java-test"
    state: present

